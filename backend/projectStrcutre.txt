# Complete PDF Editor Project Structure

## Project Directory Structure

```
pdf-editor-app/
â”œâ”€â”€ backend/                          # Flask API
â”‚   â”œâ”€â”€ app.py                       # Main Flask application
â”‚   â”œâ”€â”€ requirements.txt             # Python dependencies
â”‚   â”œâ”€â”€ Dockerfile                   # Docker configuration
â”‚   â”œâ”€â”€ uploads/                     # Uploaded files directory
â”‚   â”œâ”€â”€ temp/                        # Temporary files directory
â”‚   â””â”€â”€ utils/                       # Utility functions
â”‚       â”œâ”€â”€ __init__.py
â”‚       â”œâ”€â”€ pdf_processor.py         # PDF processing logic
â”‚       â”œâ”€â”€ image_processor.py       # Image processing utilities
â”‚       â””â”€â”€ security.py             # Security utilities
â”‚
â”œâ”€â”€ frontend/                        # Next.js Application
â”‚   â”œâ”€â”€ pages/                       # Next.js pages
â”‚   â”‚   â”œâ”€â”€ _app.js                 # App wrapper
â”‚   â”‚   â”œâ”€â”€ _document.js            # Document structure
â”‚   â”‚   â”œâ”€â”€ index.js                # Home page
â”‚   â”‚   â””â”€â”€ api/                    # API routes (proxy)
â”‚   â”‚       â””â”€â”€ [...path].js        # Dynamic API proxy
â”‚   â”œâ”€â”€ components/                  # React components
â”‚   â”‚   â”œâ”€â”€ PDFViewer.js            # PDF viewing component
â”‚   â”‚   â”œâ”€â”€ TextEditor.js           # Text editing component
â”‚   â”‚   â”œâ”€â”€ ImageEditor.js          # Image editing component
â”‚   â”‚   â”œâ”€â”€ PythonViewer.js         # Python file viewer
â”‚   â”‚   â”œâ”€â”€ JupyterViewer.js        # Jupyter notebook viewer
â”‚   â”‚   â”œâ”€â”€ FileUploader.js         # File upload component
â”‚   â”‚   â””â”€â”€ common/                 # Common components
â”‚   â”‚       â”œâ”€â”€ Button.js
â”‚   â”‚       â”œâ”€â”€ Modal.js
â”‚   â”‚       â””â”€â”€ LoadingSpinner.js
â”‚   â”œâ”€â”€ styles/                      # Styling files
â”‚   â”‚   â”œâ”€â”€ globals.css             # Global styles
â”‚   â”‚   â””â”€â”€ components/             # Component styles
â”‚   â”œâ”€â”€ utils/                       # Utility functions
â”‚   â”‚   â”œâ”€â”€ api.js                  # API client
â”‚   â”‚   â”œâ”€â”€ file-utils.js           # File utilities
â”‚   â”‚   â””â”€â”€ constants.js            # Constants
â”‚   â”œâ”€â”€ public/                      # Static assets
â”‚   â”‚   â”œâ”€â”€ icons/
â”‚   â”‚   â””â”€â”€ images/
â”‚   â”œâ”€â”€ package.json                 # Node.js dependencies
â”‚   â”œâ”€â”€ next.config.js              # Next.js configuration
â”‚   â”œâ”€â”€ tailwind.config.js          # Tailwind CSS configuration
â”‚   â””â”€â”€ postcss.config.js           # PostCSS configuration
â”‚
â”œâ”€â”€ docker-compose.yml               # Docker Compose for development
â”œâ”€â”€ render.yaml                      # Render deployment configuration
â”œâ”€â”€ README.md                        # Project documentation
â””â”€â”€ .gitignore                      # Git ignore rules
```

## Key Features Implementation

### ðŸš€ **Backend Features (Flask API)**

#### 1. **Advanced PDF Operations**
- âœ… Text extraction with formatting preservation
- âœ… Real-time text editing with click-to-select
- âœ… Image extraction and OCR text recognition
- âœ… Watermark addition
- âœ… PDF merging and splitting
- âœ… Metadata editing
- âœ… Annotation support
- âœ… PDF compression

#### 2. **Format Conversion**
- âœ… PDF â†” Word conversion
- âœ… PDF â†’ Images conversion
- âœ… Images â†’ PDF conversion
- âœ… Multiple format support

#### 3. **Python & Jupyter Integration**
- âœ… Python file viewing with syntax highlighting
- âœ… Code execution (sandboxed)
- âœ… Jupyter notebook rendering
- âœ… Cell-by-cell execution

#### 4. **Advanced Image Processing**
- âœ… OCR for text extraction from images
- âœ… Image enhancement and filtering
- âœ… Automatic image optimization
- âœ… Multiple format support

### ðŸŽ¨ **Frontend Features (Next.js)**

#### 1. **Modern UI/UX**
- âœ… Responsive design with Tailwind CSS
- âœ… Drag-and-drop file upload
- âœ… Real-time preview
- âœ… Interactive editing tools
- âœ… Professional color scheme

#### 2. **PDF Editing Interface**
- âœ… Click-to-select text elements
- âœ… Visual editing dialog
- âœ… Zoom and pan controls
- âœ… Page navigation
- âœ… Search and replace functionality

#### 3. **Multi-Format Support**
- âœ… Tabbed interface for different file types
- âœ… Syntax highlighting for Python
- âœ… Jupyter notebook rendering
- âœ… Live code execution

## ðŸ›  **Installation & Setup**

### **Prerequisites**
- Python 3.8+
- Node.js 16+
- Tesseract OCR
- Poppler Utils

### **Backend Setup**
```bash
# Navigate to backend directory
cd backend

# Create virtual environment
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate

# Install dependencies
pip install -r requirements.txt

# Install system dependencies (Ubuntu/Debian)
sudo apt-get update
sudo apt-get install tesseract-ocr poppler-utils

# Run the Flask API
python app.py
```

### **Frontend Setup**
```bash
# Navigate to frontend directory
cd frontend

# Install dependencies
npm install

# Run development server
npm run dev

# Build for production
npm run build
npm start
```

### **Docker Setup**
```bash
# Build and run with Docker Compose
docker-compose up --build

# Or build individual containers
docker build -t pdf-editor-api ./backend
docker build -t pdf-editor-frontend ./frontend
```

## ðŸš€ **Deployment on Render**

### **1. Repository Setup**
1. Create a GitHub repository
2. Push your code to the repository
3. Connect to Render

### **2. Service Configuration**

#### **Backend Service (Flask API)**
- **Build Command**: `pip install -r requirements.txt && apt-get update && apt-get install -y tesseract-ocr poppler-utils`
- **Start Command**: `python app.py`
- **Environment**: `python`
- **Port**: `5000`

#### **Frontend Service (Next.js)**
- **Build Command**: `npm install && npm run build`
- **Start Command**: `npm start`
- **Environment**: `node`
- **Port**: `3000`

### **3. Environment Variables**
```env
# Backend
FLASK_ENV=production
PORT=5000

# Frontend
NEXT_PUBLIC_API_URL=https://your-api-service.onrender.com
NODE_ENV=production
```

## ðŸ“š **API Documentation**

### **Core Endpoints**

#### **File Operations**
- `POST /api/upload` - Upload PDF/Python/Jupyter files
- `GET /api/pdf/info` - Get PDF information
- `GET /api/pdf/page/{page_num}` - Get specific page data
- `GET /api/pdf/save` - Download edited PDF

#### **Text Operations**
- `POST /api/pdf/update-text` - Update text element
- `POST /api/pdf/add-text` - Add new text
- `POST /api/search-replace` - Find and replace text
- `GET /api/pdf/extract-text` - Extract all text

#### **Image Operations**
- `POST /api/pdf/add-image` - Add image to PDF
- `GET /api/pdf/ocr` - Extract text from images
- `POST /api/convert/images-to-pdf` - Convert images to PDF

#### **Advanced Features**
- `POST /api/pdf/watermark` - Add watermark
- `POST /api/pdf/merge` - Merge multiple PDFs
- `POST /api/pdf/split` - Split PDF pages
- `POST /api/pdf/compress` - Compress PDF

#### **Code Execution**
- `POST /api/python/execute` - Execute Python code
- `POST /api/jupyter/execute-cell` - Execute Jupyter cell

## ðŸ”§ **Configuration Options**

### **Backend Configuration (app.py)**
```python
# File upload limits
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB

# CORS settings
CORS(app, origins=["http://localhost:3000", "https://your-frontend.onrender.com"])

# OCR settings
pytesseract.pytesseract.tesseract_cmd = '/usr/bin/tesseract'
```

### **Frontend Configuration (next.config.js)**
```javascript
const nextConfig = {
  env: {
    NEXT_PUBLIC_API_URL: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000',
  },
  async rewrites() {
    return [
      {
        source: '/api/:path*',
        destination: `${process.env.NEXT_PUBLIC_API_URL}/api/:path*`,
      },
    ];
  },
}
```

## ðŸ›¡ **Security Features**

### **Backend Security**
- File type validation
- File size limits
- Sandboxed code execution
- Input sanitization
- CORS configuration

### **Frontend Security**
- XSS protection
- CSRF tokens
- Secure file uploads
- Input validation

## ðŸ“Š **Performance Optimizations**

### **Backend**
- Efficient PDF processing with PyMuPDF
- Image optimization
- Temporary file cleanup
- Memory management

### **Frontend**
- Code splitting
- Image optimization
- Lazy loading
- Caching strategies

## ðŸŽ¯ **Usage Examples**

### **1. PDF Text Editing**
```javascript
// Click on text in PDF viewer
// Edit in modal dialog
// Changes applied in real-time
```

### **2. Python File Viewing**
```javascript
// Upload .py file
// Syntax highlighted display
// Execute code safely
```

### **3. Jupyter Integration**
```javascript
// Upload .ipynb file
// Rendered notebook view
// Execute cells individually
```

This comprehensive system provides professional-grade PDF editing capabilities with modern web technologies, making it perfect for deployment on cloud platforms like Render.